-* s3d - svg 3D - [cc-by] Sebastian Rostock *-
-* Dieses Werk ist unter einem Creative Commons Namensnennung 3.0 Deutschland Lizenzvertrag lizenziert. Um die Lizenz anzusehen, gehen Sie bitte zu:  [ http://creativecommons.org/licenses/by/3.0/de/ ] oder schicken Sie einen Brief an:  [ Creative Commons, 171 Second Street, Suite 300, San Francisco, California 94105, USA. ] *-

s3d(): pc.NS<s3d> {
	@|<p>|
	@de|Diese Bibliothek definiert einige Klassen zur Erstellung von animierbaren 3D-Szenen mit "SVG". Sie hängt von der Bibliothek "pc" ab.|
	@en|This library defines some classes for creating animatable 3D-scenes with "SVG". It depends on the library "pc".|
	@|</p><p>|
	@de|Um den Namensraum nutzen zu können, ruft man einfach die Funktion "s3d" auf. Diese erstellt den Namensraum, ersetzt sich mit ihm und gibt ihn zurück.|
	@en|To be able use the name-space, one simply calls the function "s3d". It creates the name-space, replaces itself with it and returns it.|
	--{ INIT
	@|</p><p>|
	@de|Das nun folgende Beispiel soll die Verwendung dieser Bibliothek illustrieren. Wie schon beschrieben, muss zuerst der Namensraum "s3d" initialisiert werden.|
	@en|The now following example should illustrate the usage of this library. Like already described, the name-space "s3d" has to be initialized first.|
    @|<pre>s3d();</pre>|
	--}
	--{ MODEL
	@|</p><p>|
	@de|Für die Beschreibung von Szenenobjekten benötigt man Modelle von Elementknoten. Die hier verwendeten Modelle definieren "SVGCircleElement"- und "SVGPolygonElement"-Elementknoten in den Farben Weiß, Rot, Grün und Blau.|
	@en|For the description of scene-objects one needs models of element-nodes. The models used here define "SVGCircleElement"- and "SVGPolygonElement"-element-nodes in the colors white, red, green and blue.|
    @|<pre>var circleModelA=new s3d.Model('svg:circle', {
  'r':'0.08', 'fill':'rgb(255,255,255)', 'fill-opacity':'0.80', 'stroke':'rgb(127,127,127)', 'stroke-width':'0.02', 'stroke-opacity':'0.70', 'stroke-linejoin':'round', 'stroke-linecap':'round'
},null);
var circleModelB=new s3d.Model('svg:circle', {
  'r':'0.08', 'fill':'rgb(255,0,0)', 'fill-opacity':'0.80', 'stroke':'rgb(127,0,0)', 'stroke-width':'0.02', 'stroke-opacity':'0.70', 'stroke-linejoin':'round', 'stroke-linecap':'round'
}, null);
var circleModelC=new s3d.Model('svg:circle', {
  'r':'0.08', 'fill':'rgb(0,255,0)', 'fill-opacity':'0.80', 'stroke':'rgb(0,127,64)', 'stroke-width':'0.02', 'stroke-opacity':'0.70', 'stroke-linejoin':'round', 'stroke-linecap':'round'
}, null);
var circleModelD=new s3d.Model('svg:circle',{
  'r':'0.08', 'fill':'rgb(0,0,255)', 'fill-opacity':'0.80', 'stroke':'rgb(0,0,127)', 'stroke-width':'0.02', 'stroke-opacity':'0.70', 'stroke-linejoin':'round', 'stroke-linecap':'round'
}, null);
var polygonModelA=new s3d.Model('svg:polygon', {
  'fill':'rgb(255,255,255)', 'fill-opacity':'0.80', 'stroke':'rgb(127,127,127)', 'stroke-width':'0.02', 'stroke-opacity':'0.70', 'stroke-linejoin':'round', 'stroke-linecap':'round'
}, null);
var polygonModelB=new s3d.Model('svg:polygon', {
  'fill':'rgb(255,0,0)', 'fill-opacity':'0.80', 'stroke':'rgb(127,0,0)', 'stroke-width':'0.02', 'stroke-opacity':'0.70', 'stroke-linejoin':'round', 'stroke-linecap':'round'
}, null);
var polygonModelC=new s3d.Model('svg:polygon', {
  'fill':'rgb(0,255,0)', 'fill-opacity':'0.80', 'stroke':'rgb(0,127,64)', 'stroke-width':'0.02', 'stroke-opacity':'0.70', 'stroke-linejoin':'round', 'stroke-linecap':'round'
}, null);
var polygonModelD=new s3d.Model('svg:polygon', {
  'fill':'rgb(0,0,255)', 'fill-opacity':'0.80', 'stroke':'rgb(0,0,127)', 'stroke-width':'0.02', 'stroke-opacity':'0.70', 'stroke-linejoin':'round', 'stroke-linecap':'round'
}, null);</pre>|
	--}
	--{ POINTS
	@|</p><p>|
	@de|Um Szenenobjekte positionieren zu können, mussen sie Punkte besitzen, die über Matrizen transformiert werden. Die hier definierten Punkte entsprechen den Eckpunkten eines Tetraeders.|
	@en|In order to be able to position scene-objects, they must have points that are transformed via matrices. The points defined here correspond to the vertices of a tetrahedron.|
    @|<pre>var pointA=new s3d.Point(0,0.5443310539518172,0,1);
var pointB=new s3d.Point(-0.5,-0.2721655269759087,0.28867513459481287,1);
var pointC=new s3d.Point(0.5,-0.2721655269759087,0.28867513459481287,1);
var pointD=new s3d.Point(0,-0.2721655269759087,-0.5773502691896257,1);</pre>|
	--}
	--{ UPDATE
	@|</p><p>|
	@de|Wie die transformierten Punkte eines Szenenobjektes auf seinen Elementknoten übertragen werden, wird durch einen Ereignisempfänger beschrieben.|
	@en|How the transformed points of an scene-object are transfered to its element-node, is determined by an event-listener.|
    @|<pre>function onUpdateCircle(Node,Points){
  Node.setValue('cx',Points[0].x).setValue('cy',Points[0].y);
  return Points[0].z*3;
}
function onUpdatePolygon(Node,Points){
  Node.setValue('points',[Points[0].x,Points[0].y,Points[1].x,Points[1].y,Points[2].x,Points[2].y].join(' '));
  return Points[0].z+Points[1].z+Points[2].z;
}</pre>|
	--}
	--{ OBJECT
	@|</p><p>|
	@de|Aus den bisher definierten Werten können nun acht Objekte erzeugt werden, die den Seitenflächen und Eckpunkte des Tetraeders entsprechen.|
	@en|From the previously defined values now eight objects can be created, that correspond to the faces and vertices of the tetrahedron.|
    @|<pre>var circleObjectA=new s3d.Object(circleModelA, [pointA], onUpdateCircle);
var circleObjectB=new s3d.Object(circleModelB, [pointB], onUpdateCircle);
var circleObjectC=new s3d.Object(circleModelC, [pointC], onUpdateCircle);
var circleObjectD=new s3d.Object(circleModelD, [pointD], onUpdateCircle);
var polygonObjectA=new s3d.Object(polygonModelA, [pointB, pointC, pointD], onUpdatePolygon);
var polygonObjectB=new s3d.Object(polygonModelB, [pointA, pointD, pointC], onUpdatePolygon);
var polygonObjectC=new s3d.Object(polygonModelC, [pointD, pointA, pointB], onUpdatePolygon);
var polygonObjectD=new s3d.Object(polygonModelD, [pointC, pointB, pointA], onUpdatePolygon);</pre>|
	--}
	--{ MATRIX
	@|</p><p>|
	@de|Als Nächstes folgt die Definition einiger Matrizen zur Positionierung der Szenenobjekte.|
	@en|Next is the definition of some matrices for positioning scene-objects.|
    @|<pre>var circleMatrix=new s3d.Matrix().setScale(1.1, 1.1, 1.1);
var polygonMatrix=new s3d.Matrix();
var crossEyeLeftMatrix=new s3d.Matrix().setCommand('O', 0.5, 0.5, 0, 'R', 0, 1, 0, -0.08);
var crossEyeRightMatrix=new s3d.Matrix().setCommand('O', 2.5, 0.5, 0, 'R', 0, 1, 0, 0.08);</pre>|
	--}
	--{ GROUP
	@|</p><p>|
	@de|Die nachfolgend definierten Szenengruppen ermöglichen die Anwendung der Matrizen auf die Szenenobjekte.|
	@en|The following defined scene-groups allows the application of the matrices to the scene-objects.|
    @|<pre>var circleGroup=new s3d.Group(circleMatrix, null, [circleObjectA, circleObjectB, circleObjectC, circleObjectD]);
var polygonGroup=new s3d.Group(polygonMatrix, [circleGroup], [polygonObjectA, polygonObjectB, polygonObjectC, polygonObjectD]);
var crossEyeLeftGroup=new s3d.Group(crossEyeLeftMatrix, [polygonGroup], null);
var crossEyeRightGroup=new s3d.Group(crossEyeRightMatrix, [polygonGroup], null);
var crossEyeSceneGroup=new s3d.Group(null, [crossEyeLeftGroup, crossEyeRightGroup], null);</pre>|
	--}
	--{ SURFACE
	@|</p><p>|
	@de|Zum Zeichnen dieser Szenengruppe wird nun eine Zeichenfläche definiert.|
	@en|To draw the scene-group now a surface is defined.|
    @|<pre>var surface=new s3d.Surface('cross-eye-scene', crossEyeSceneGroup, false, true, false, 0);</pre>|
	--}
	--{ CANVAS
	@|</p><p>|
	@de|Zur Anzeige der Zeichenfläche wird eine Leinwand erzeugt.|
	@en|To display the surface now a canvas is created.|
    @|<pre>var canvas=new s3d.Canvas(3, 1, 0, [surface]);</pre>|
	@de|An dieser Leinwand soll ein Ereignisempfänger für das Ereignisse "onMouseEnter" angehängt werden, welcher den Linienstil des unter dem Mauszeiger befindlichen Elementknotens verändern.|
	@en|To this canvas an event-listeners for the event "onMouseEnter" that change the stroke-style of the element-node under the cursor should be appended.|
    @|<pre>var targetNode=null;
function onMouseEnterCanvas(evt){
  if(targetNode)targetNode.setValue('stroke-width','0.02').setValue('stroke-dasharray','0');
  targetNode=evt.target.correspondingElement;
  if(targetNode)targetNode.setValue('stroke-width','0.04').setValue('stroke-dasharray','0 0.04');
}</pre>|
	@|</p><p>|
	@de|Zum Schluss werden die Größe der Leinwand gesetzt, der Ereignisempfänger der Leinwand angehängt und der Elementknoten der Leinwand in die Webseite eingefügt werden.|
	@en|Finally, the size of the canvas is set, the event-listener is appended to the canvas and the element-node of the canvas is inserted into the web-page.|
    @|<pre>document.getElementById('container').appendChild(canvas.node.setValues({
  'width':'768', 'height':'256'
}).setStyles({
  'width':'768px', 'height':'256px', 'margin':'8px', 'outline':'black solid 1px'
}).appendEvent(s3d.Event.onMouseEnter, onMouseEnterCanvas, false));</pre>|
	@de|Diese Letze Zeile schließt das Beispiel für ein statisches Bild ab.|
	@en|This last line closes the example for a static image.|
	--}
	--{ ANIMATE
	@|</p><p>|
	@de|Im Folgenden soll das begonnene Beispiel um animierte Änderung von Größe und Rotation der Szenengruppe "polygonGroup" erweitert werden. Für diese Änderungen werden Partikelvektoren mit Trägheits- und Reibungssimulation verwendet. Diese bestehen je aus einem Jetzt-, einem Ziel- und einem Geschwindigkeitswert.|
	@en|Here, the begun example is extended by animation of size and rotation of the scene-group "polygonGroup". For these changes particle-vectors will be used for inertia- and friction-simulation. This vectors consist of a now-, a target- and a speed-value.|
    @|<pre>var vectors=[[1, 1, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]];</pre>|
	@|</p><p>|
	@de|Die Zielwerte werden alle "1000" Millisekunden zufällig neun bestimmt.|
	@en|The target-values will be set to random values every "1000" milliseconds.|
    @|<pre>setInterval(function(){
  for(var i=0,size=vectors.length;i&lt;size;i++)vectors[i][1]=Math.random()-0.5;
}, 1000);</pre>|
	@|</p><p>|
	@de|Die Jetzt- und Geschwindigkeitswerte werden alle "15" Millisekunden neu berechnet.|
	@en|The now- and speed-values are recalculated every "15" milliseconds.|
    @|<pre>setInterval(function(){
  for(var i=0,size=vectors.length;i&lt;size;i++)vectors[i][0]+=(vectors[i][2]=vectors[i][2]*0.94+(vectors[i][1]-vectors[i][0])*0.006);
}, 15);</pre>|
	@|</p><p>|
	@de|Zum Schluss werden die Jetztwerte der Vektoren zur Berechnung der Matrix der Szenengruppe verwendet. Nach der Manipulation der Matrix werden die Knoten der Zeichenfläche aktualisiert. Dieser Prozess wiederholt sich alle "50" Millisekunden.|
	@en|Finally, the now-values of the vectors are used to calculate the matrix of the scene-group. After the manipulation of the matrix the nodes of the surface are updated. This process is repeated every "50" milliseconds.|
    @|<pre>setInterval(function(){
  var s=0.5+vectors[0][0]*0.6;
  polygonMatrix.setCommand('R',0,0,1,vectors[1][0]*6.28,'R',0,1,0,vectors[2][0]*6.28,'R',1,0,0,vectors[3][0]*6.28,'S',s,s,s);
  surface.update();
}, 50);</pre>|
	--}
	@|</p><p>|
	@de|Alles zusammen sieht dann so aus:|
	@en|All together looks like that:|
	@|<a href=""s3d-demo.html"">s3d-demo.html</a>.|
	@|</p>|
	+ (): s3d // pc.NS
	- names: String[]{}
		@de|Dieses Feld speichert den Graph der Methode "nameOf()".|
		@en|This field stores the graph of the method "nameOf()".|
	- applyPoint: s3d.Point
		@de|Dieses Feld speichert einen Hilfspunkt für die Methode "s3d.Matrix.applyToPoint()".|
		@en|This field stores a helper-point for the method "s3d.Matrix.applyToPoint()".|
	- applyMatrix: s3d.Matrix
		@de|Dieses Feld speichert einen Hilfsmatrix für die Methode "s3d.Matrix.applyToMatrix()".|
		@en|This field stores a helper-matrix for the method "s3d.Matrix.applyToMatrix()".|
	- chainLast: s3d.Matrix
		@de|Dieses Feld speichert einen Hilfsmatrix für die Methode "s3d.Matrix.setChain()".|
		@en|This field stores a helper-matrix for the method "s3d.Matrix.setChain()".|
	- chainNext: s3d.Matrix
		@de|Dieses Feld speichert einen Hilfsmatrix für die Methode "s3d.Matrix.setChain()".|
		@en|This field stores a helper-matrix for the method "s3d.Matrix.setChain()".|
	- commandMap: String{}
		@de|Dieses Feld bildent Befehle auf Methodennamen ab.|
		@en|This field maps commands onto method-names.|
	- commandLast: s3d.Matrix
		@de|Dieses Feld speichert einen Hilfsmatrix für die Methode "s3d.Matrix.setCommand()".|
		@en|This field stores a helper-matrix for the method "s3d.Matrix.setCommand()".|
	- commandNext: s3d.Matrix
		@de|Dieses Feld speichert einen Hilfsmatrix für die Methode "s3d.Matrix.setCommand()".|
		@en|This field stores a helper-matrix for the method "s3d.Matrix.setCommand()".|
	- commandThis: s3d.Matrix
		@de|Dieses Feld speichert einen Hilfsmatrix für die Methode "s3d.Matrix.setCommand()".|
		@en|This field stores a helper-matrix for the method "s3d.Matrix.setCommand()".|
	- canvasModel: s3d.Model
		@de|Dieses Feld speichert das Model des Knotens einer Leinwand.|
		@en|This field stores the model of the node of a canvas.|
	- surfaceRealModel: s3d.Model
		@de|Dieses Feld speichert das Model eines Knotens für eine nicht-virtuelle Zeichenfläche.|
		@en|This field stores the model of the node for a not-virtual surface.|
	- surfaceVirtualModel: s3d.Model
		@de|Dieses Feld speichert das Model eines Knotens für eine virtuelle Zeichenfläche.|
		@en|This field stores the model of the node for a virtual surface.|
	- surfaceCompareOrder(First, Second: s3d.CacheObject): Number
		@de|Diese Methode vergleicht zwei Zeichencacheobjekte nach ihrer Zeichenreigenfolge.|
		@en|This method compares two render-cache-objects by their render-order.|
	- surfaceGenerateCache(Cache: s3d.CacheSurface; Skip: s3d.SkipMode; Group: s3d.Group; Matrix: s3d.Matrix; NoJoin: Boolean): s3d.CacheGroup[]
		@de|Diese Methode generiert den Cache einer Zeichenfläche.|
		@en|This method generates the cache of a surface.|
	- copy(This, Data: Object{}): Object{}
		@de|Diese Methode kopiert alle Mitglieder von "Data" nach "This" und gibt "This" zurück.|
		@en|This method copies all members from "Data" to "This" and returns "This".|
	- nameOf(Key: String): String[]
		@de|Diese Methode gibt eine Liste bestehend aus einem Namensraum und einem Namen zurück. Das Argument "Key" hat dabei die Form "'NAMESPACEKEY:NAME'", wobei "NAME" den Namen angibt und "NAMESPACEKEY" als Schlüssel in "s3d.NameSpace" den Namensraum bestimmt. Die zurück gegebene Liste wird dabei auch unter dem Schlüssel "Key" in die Abbildung "names" eingetragen.|
		@en|This method returns a lists consisting of a name-space and a name. The argument "Key" has the form "'NAMESPACEKEY:NAME'", where "NAME" defines the namen and "NAMESPACEKEY" as key for "s3d.NameSpace" determines the name-space. The returned list is also appended into the map "names" with the key "Key".|
	- UserData(): s3d.UserData
		@de|Diese Schnittstelle definiert die Nutzerdateneigenschaft.|
		@en|This interface defines the user-data-property.|
	- SkipMode(): s3d.SkipMode
		@de|Diese Schnittstelle definiert die Auslassmoduseigenschaft.|
		@en|This interface defines the skip-mode-property.|
	+ SKIP_APPLY: Number
		@de|Dieses Feld identifiziert die Markierung für das Auslassen von Transformationen ("s3d.Matrix.applyToPoint"/"s3d.Matrix.applyToMatrix"). Sein Wert ist "1".|
		@en|This field identifies the flag for skipping transformations ("s3d.Matrix.applyToPoint"/"s3d.Matrix.applyToMatrix"). Its value is "1".|
	+ SKIP_UPDATE: Number
		@de|Dieses Feld identifiziert die Markierung für das Auslassen von Szenenobjektaktualisierungen ("s3d.Object.onUpdate"). Sein Wert ist "2".|
		@en|This field identifies the flag for skipping point-transformations and scene-object-updates ("s3d.Object.onUpdate"). Its value is "2".|
	+ SKIP_DISPLAY: Number
		@de|Dieses Feld identifiziert die Markierung für das Auslassen der Szenenobjektanzeige. Sein Wert ist "4".|
		@en|This field identifies the flag for skipping the scene-object displaying. Its value is "4".|
	+ Event: String{}
		@de|Dieses Feld bildet Namen auf "DOMEvent"-Ereignistypen ab. Es hat den Wert|
		@en|This field maps names onto "DOMEvent"-event-types. Its value is|
		@|"{ onClick: 'click', onMouseDown: 'mousedown', onMouseUp: 'mouseup', onMouseEnter: 'mouseover', onMouseMove: 'mousemove', onMouseLeave: 'mouseout', onMouseWheel: 'mousewheel', onZoom: 'SVGZoom', onLoad: 'SVGLoad', onUnload: 'SVGUnload', onAbort: 'SVGAbort', onError: 'SVGError', onResize: 'SVGResize', onScroll: 'SVGScroll', onActivate: 'DOMActivate', onFocusEnter: 'DOMFocusIn', onFocusLeave: 'DOMFocusOut', onNodeRemoved: 'DOMNodeRemoved', onNodeRemovedFromDocument: 'DOMNodeRemovedFromDocument', onNodeInserted: 'DOMNodeInserted', onNodeInsertedIntoDocument: 'DOMNodeInsertedIntoDocument', onSubtreeModified: 'DOMSubtreeModified', onAttributeModified: 'DOMAttrModified', onCharacterdataModified: 'DOMCharacterDataModified' }".|
	+ NameSpace: String{}
		@de|Dieses Feld bildet Namen auf "XML"-Namensräume ab. Es hat den Wert|
		@en|This field maps names onto "XML"-name-spaces. Its value is|
		@|"{ svg: 'http://www.w3.org/2000/svg', xhtml: 'http://www.w3.org/1999/xhtml', xlink: 'http://www.w3.org/1999/xlink' }".|
	+ Base(): s3d.Base
		@de|Diese Klasse definiert die Basis für Szenenobjekte und Szenengruppen mit Auslassmodus und Nutzerdaten.|
		@en|This class defines the base for scene-objects and scene-groups with skip-mode and user-data.|
	+ Text(Text: String): s3d.Text
		@de|Diese Klasse definiert einen Textknoten.|
		@en|This class defines a text-node.|
	+ Node(Name, NameSpace: String): s3d.Node
		@de|Diese Klasse definiert einen Elementknoten.|
		@en|This class defines an element-node.|
	+ Model(Name: String; Values: String{}; Models: ?<String; s3d.Model>[]): s3d.Model
		@de|Diese Klasse definiert das Model eines Elementknoten.|
		@en|This class defines the model of an element-node.|
	+ Point(X, Y, Z, I: Number): s3d.Point
		@de|Diese Klasse definiert einen vierdimensionalen Punkt.|
		@en|This class defines a four-dimensional point.|
	+ Matrix(XX, XY, XZ, XI, YX, YY, YZ, YI, ZX, ZY, ZZ, ZI, IX, IY, IZ, II: Number): s3d.Matrix
		@de|Diese Klasse definiert einen vierdimensionale Transformationsmatrix.|
		@en|This class defines a four-dimensional transformation-matrix.|
	+ Group(Matrix: s3d.Matrix; Groups: s3d.Group[]; Objects: s3d.Object[]): s3d.Group
		@de|Diese Klasse definiert eine Szenengruppe zur Erstellung von Szenenbäumen.|
		@en|This class defines a scene-group for creating scene-trees.|
	+ Object(Model: s3d.Model; Points: s3d.Point[]; OnUpdate: s3d.OnUpdateMethod): s3d.Object
		@de|Diese Klasse definiert ein Szenenobjekt.|
		@en|This class defines a scene-object.|
	+ Canvas(Width, Height, Index: Number; Surfaces: s3d.Surface[]): s3d.Canvas
		@de|Diese Klasse definiert eine Leinwand, die mehrere Zeichenflächen besitzen und eine davon anzeigen kann.|
		@en|This class defines a canvas that owns multiple surfaces and that can show one of them.|
	+ Surface(Id: String; Group: s3d.Group; Virtual, NoClip, NoJoin, NoSkip: Boolean): s3d.Surface
		@de|Diese Klasse definiert eine Zeichenfläche, die eine Szenengruppe anzeigen kann|
		@en|This class defines a surface that can show a scene-group.|
	+ CacheObject(Index: Number; Object: s3d.Object; Points: s3d.Point[]): s3d.CacheObject
		@de|Diese Klasse definiert eine optimierte Zugriffsstruktur auf ein zu verarbeitendes Szenenobjek im Cache einer Zeichenfläche.|
		@en|This class defines an optimised access-structure on a scene-object to be processed in the cache of a surface.|
	+ CacheSurface(Skips: s3d.CacheOperation<s3d.SkipMode; s3d.SkipMode>[]; Points: s3d.CacheOperation<s3d.Matrix; s3d.Point>[]; Objects: s3d.CacheObject[]; Matrices: s3d.CacheOperation<s3d.Matrix; s3d.Matrix>[]): s3d.CacheSurface
		@de|Diese Klasse definiert einen optimierte Zugriffsstruktur auf die während der Aktualisierung einer Zeichenfläche zu verarbeitenden Objekte und Operationen.|
		@en|This class defines an optimised access-structure on the objects and operations to be processed while updating a surface.|
	+ CacheOperation<GParent; GValue>(Parent: GParent; Source, Target: GValue): s3d.CacheOperation<GParent; GValue>
		@de|Diese Klasse definiert eine Operation.|
		@en|This class defines an operation.|
}

s3d.Base(): s3d.SkipMode, s3d.UserData {
	@de|Diese Klasse definiert die Basis für Szenenobjekte und Szenengruppen mit Auslassmodus und Nutzerdaten.|
	@en|This class defines the base for scene-objects and scene-groups with skip-mode and user-data.|
	+ skipMode: Number // s3d.SkipMode
	+ userData: Object // s3d.UserData
	+ setUserData(UserData: Object): s3d.UserData // s3d.UserData
	+ setSkipMode(SkipMode: Number): s3d.Base
		@de|Diese Methode setzt de Auslassmodus und gibt "this" zurück.|
		@en|This method sets the skip-mode and returns "this".|
}

s3d.Text(Text: String): DOMText {
	@de|Diese Klasse definiert einen Textknoten. Das Konstrukteurargument "Text" initialisiert den Knotenwert.|
	@en|This class defines a text-node. The constructor-argument "Text" initiates the node-value.|
}

s3d.Node(Name, NameSpace: String): DOMElement, s3d.UserData {
	@de|Diese Klasse definiert einen Elementknoten. Die Konstrukteurargumente "Name" und "NameSpace" definieren den Knotennamen und seinen Namensraum. Wenn "NameSpace" nicht undefiniert ist, wird "Name" mit der Methode "nameOf()" in einen Namen mit Namensraum konvertiert.|
	@en|This class defines an element-node. The constructor-arguments "Name" and "NameSpace" define the node-name and its name-space. if "NameSpace" is undefined, "Name" is converted into a name with name-space via the method "nameOf()".|
	+ userData: Object // s3d.UserData
	+ setUserData(UserData: Object): s3d.UserData // s3d.UserData
	+ assignNodes(Nodes: DOMNode[]): s3d.Node
		@de|Diese Methode entfernt alle Kindknoten, fügt die Kindknoten "Nodes" hinzu und gibt "this" zurück.|
		@en|This method removes all child-nodes, appends the child-nodes "Nodes" and returns "this".|
	+ deleteNodes(): s3d.Node
		@de|Diese Methode entfernt alle Kindknoten und gibt "this" zurück.|
		@en|This method removes all child-nodes and returns "this".|
	+ appendNode(Node: DOMNode): s3d.Node
		@de|Diese Methode fügt den Kindknoten "Node" hinzu und gibt "this" zurück.|
		@en|This method appends the child-node "Node" and returns "this".|
	+ appendNodes(Nodes: DOMNode[]): s3d.Node
		@de|Diese Methode fügt die Kindknoten "Nodes" hinzu und gibt "this" zurück.|
		@en|This method appends the child-nodes "Nodes" and returns "this".|
	+ removeNode(Node: DOMNode): s3d.Node
		@de|Diese Methode entfernt den Kindknoten "Node" und gibt "this" zurück.|
		@en|This method removes the child-node "Node" and returns "this".|
	+ removeNodes(Nodes: DOMNode[]): s3d.Node
		@de|Diese Methode entfernt die Kindknoten "Nodes" und gibt "this" zurück.|
		@en|This method removes the child-nodes "Nodes" and returns "this".|
	+ appendEvent(Type: String; Method: DOMEventListener; Capture: Boolean): s3d.Node
		@de|Diese Methode fügt den Ereignisempfänger "Method" des Typs "Type" im Modus "Capture" hinzu und gibt "this" zurück. Gültige Typen sind in den Schlüsseln und Werten der Abbildung "s3d.Event" gespeichert.|
		@en|This method appends the event-listener "Method" of type "Type" in mode "Capture" and returns "this". Valid types are stores in the keys and values of the map "s3d.Event".|
	+ appendEvents(Methods: DOMEventListener{}; Capture: Boolean): s3d.Node
		@de|Diese Methode fügt die Ereignisempfänger "Methods" im Modus "Capture" hinzu und gibt "this" zurück. Die Schlüssel der Ereignisempfänger in "Methods" definieren deren Typ.|
		@en|This method appends the event-listeners "Methods" in mode "Capture" and returns "this". The keys of the event-listeners in "Methods" define theit type.|
	+ removeEvent(Type: String; Method: DOMEventListener; Capture: Boolean): s3d.Node
		@de|Diese Methode entfernt den Ereignisempfänger "Method" des Typs "Type" im Modus "Capture" und gibt "this" zurück. Gültige Typen sind in den Schlüsseln und Werten der Abbildung "s3d.Event" gespeichert.|
		@en|This method removes the event-listener "Method" of type "Type" in mode "Capture" and returns "this". Valid types are stores in the keys and values of the map "s3d.Event".|
	+ removeEvents(Methods: DOMEventListener{}; Capture: Boolean): s3d.Node
		@de|Diese Methode entfernt die Ereignisempfänger "Methods" im Modus "Capture" und gibt "this" zurück. Die Schlüssel der Ereignisempfänger in "Methods" definieren deren Typ.|
		@en|This method removes the event-listeners "Methods" in mode "Capture" and returns "this". The keys of the event-listeners in "Methods" define theit type.|
	+ getValue(Key: String): String
		@de|Diese Methode gibt den Wert des Attributes "Key" zurück. Für Attribute mit Namensraum wird das Argument "Key" über die Methode "nameOf()" in einen Attributname mit Namensraum konvertiert.|
		@en|This method returns the value of the attribute "Key". For attributes with name-space the argument "Key" is converted to an attribute-name with name-space via the method "nameOf()".|
	+ getValues(Keys: String[]): String{}
		@de|Diese Methode gibt die Werte der Attributes "Keys" zurück.|
		@en|This method returns the values of the attributes "Keys".|
	+ setValue(Key, Value: String): s3d.Node
		@de|Diese Methode setzt den Wert des Attributes "Key" auf "Value" und gibt "this" zurück. Für Attribute mit Namensraum wird das Argument "Key" über die Methode "nameOf()" in einen Attributname mit Namensraum konvertiert.|
		@en|This method sets the value of the attribute "Key" to "Value" and returns "this". For attributes with name-space the argument "Key" is converted to an attribute-name with name-space via the method "nameOf()".|
	+ setValues(Values: String{}): s3d.Node
		@de|Diese Methode setzt die Werte der Attribute auf "Values" und gibt "this" zurück.|
		@en|This method sets the values of the attributes to "Values" and returns "this".|
	+ getStyle(Key: String): String
		@de|Diese Methode gibt den Wert des Stils "Key" zurück.|
		@en|This method returns the value of the style "Key".|
	+ getStyles(Keys: String[]): String{}
		@de|Diese Methode gibt die Werte der Stile "Keys" zurück.|
		@en|This method returns the values of the style "Keys".|
	+ setStyle(Key, Style: String): s3d.Node
		@de|Diese Methode setzt den Wert des Stils "Key" auf "Style" und gibt "this" zurück.|
		@en|This method sets the value of the style "Key" to "Style" and returns "this".|
	+ setStyles(Styles: String{}): s3d.Node
		@de|Diese Methode setzt die Werte der Stile auf "Values" und gibt "this" zurück.|
		@en|This method sets the values of the style to "Values" and returns "this".|
}

s3d.Model(Name: String; Values: String{}; Models: ?<String; s3d.Model>[]): s3d.UserData {
	@de|Diese Klasse definiert das Model eines Elementknoten. Die Konstrukteurargumente initialisieren die entsprechenden Felder.|
	@en|This class defines the model of an element-node. The constructor-arguments initiate the correspondung fields.|
	+ userData: Object // s3d.UserData
	+ setUserData(UserData: Object): s3d.UserData // s3d.UserData
	= toNode(Model: ?<String; s3d.Model>): ?<s3d.Text; s3d.Node>
		@de|Diese Methode erstellt aus "Model" einen Elementknoten und gibt diesen zurück. Wenn "Model" eine "s3d.Model"-instanz ist, wird eine "s3d.Node"-Instanz erstellt. Anderenfalls wird eine "s3d.Text"-Instanz erstellt.|
		@en|This method creates an element-node out of "Model" and returns it. If "Model" is a "s3d.Model"-instance, a "s3d.Node"-instance will be created. Otherwise a "s3d.Text"-instance will be created.|
	= toNodes(Models: ?<String; s3d.Model>[]): ?<s3d.Text; s3d.Node>[]
		@de|Diese Methode erstellt aus "Models" eine Knotenliste und gibt diese zurück.|
		@en|This method creates a node-list out of "Models" and returns it.|
	+ name: String
		@de|Dieses Feld speichert den Knotennamen im Format "'NAME'" ohne "'NAMESPACEKEY:NAME'".|
		@en|This field stores the node-name in format "'NAME'" or "'NAMESPACEKEY:NAME'".|
	+ values: String{}
		@de|Dieses Feld speichert die Werte der Attribute.|
		@en|This field stores the values of the attributes.|
	+ models: ?<String; s3d.Model>[]
		@de|Dieses Feld speichert die Modelle der Kindknoten.|
		@en|This field stores the models of the child-nodes.|
	+ styles: String{}
		@de|Dieses Feld speichert die Werte der Stile.|
		@en|This field stores the values of the styles.|
	+ bubbleEvents: DOMEventListener{}
		@de|Dieses Feld speichert die aufsteigenden Ereignisempfänger.|
		@en|This field stores the bubbling event-listeners.|
	+ captureEvents: DOMEventListener{}
		@de|Dieses Feld speichert die absteigenden Ereignisempfänger.|
		@en|This field stores the capturing event-listeners.|
	+ set(Name: String; Values: String{}; Models: ?<String; s3d.Model>[]; Styles: String{}; BubbleEvents, CaptureEvents: DOMEventListener{}; UserData: Object): s3d.Model
		@de|Diese Methode setzt den Knotennamen, die Werte der Attribute, die Modelle der Kindknoten, die Werte der Stile, absteigende und aufsteigende Ereignisempfänger sowie die Nutzerdaten und gibt "this" zurück.|
		@en|This method sets the node-name, the values of the attributes, the models of the child-nodes, the values of the styles, bubbling and capturing event-listeners as well as the user-data and returns "this".|
	+ setName(Name: String): s3d.Model
		@de|Diese Methode setzt den Knotennamen und gibt "this" zurück.|
		@en|This method sets the node-name and returns "this".|
	+ setValues(Values: String{}): s3d.Model
		@de|Diese Methode setzt die Werte der Attribute und gibt "this" zurück.|
		@en|This method sets the values of the attributes and returns "this".|
	+ setModels(Models: ?<String; s3d.Model>[]): s3d.Model
		@de|Diese Methode setzt die Modelle der Kindknoten und gibt "this" zurück.|
		@en|This method sets the models of the child-nodes and returns "this".|
	+ setStyles(Styles: String{}): s3d.Model
		@de|Diese Methode setzt die Werte der Stile und gibt "this" zurück.|
		@en|This method sets the values of the styles and returns "this".|
	+ setBubbleEvents(BubbleEvents: DOMEventListener{}): s3d.Model
		@de|Diese Methode setzt die absteigenden Ereignisempfänger und gibt "this" zurück.|
		@en|This method sets the bubbling event-listeners and returns "this".|
	+ setCaptureEvents(CaptureEvents: DOMEventListener{}): s3d.Model
		@de|Diese Methode setzt die aufsteigenden Ereignisempfänger und gibt "this" zurück.|
		@en|This method sets the capturing event-listeners and returns "this".|
	+ setModel(Model: s3d.Model): s3d.Model
		@de|Diese Methode setzt die Felder auf die entsprechenden Werte von "Model" zu und gibt "this" zurück.|
		@en|This method sets the fields to the corresponding values of "Model" and returns "this".|
}

s3d.Point(X, Y, Z, I: Number): Object {
	@de|Diese Klasse definiert einen vierdimensionalen Punkt. Die Konstrukteurargumente initialisieren die entsprechenden Komponenten.|
	@en|This class defines a four-dimensional point. The constructor-arguments initiate the corresponding components.|
	+ x: Number
		@de|Dieses Feld speichert die "X"-Komponente.|
		@en|This field stores the "x"-component.|
	+ y: Number
		@de|Dieses Feld speichert die "Y"-Komponente.|
		@en|This field stores the "y"-component.|
	+ z: Number
		@de|Dieses Feld speichert die "Z"-Komponente.|
		@en|This field stores the "z"-component.|
	+ i: Number
		@de|Dieses Feld speichert die "I"-Komponente.|
		@en|This field stores the "i"-component.|
	+ set(X, Y, Z, I: Number): s3d.Point
		@de|Diese Methode setzt die Komponenten und gibt "this" zurück.|
		@en|This method sets the components and returns "this".|
	+ setPoint(Point: s3d.Point): s3d.Point
		@de|Diese Methode setzt die Felder auf die entsprechenden Werte von "Point" und gibt "this" zurück.|
		@en|This method sets the fields to the corresponding values of "Point" and returns "this".|
	+ clipI(): s3d.Point
		@de|Diese Methode wendet die imaginäre Komponente "I" in der perspektivischen Anpassung an und gibt "this" zurück.|
		@en|This method applies the imaginary component "i" in the perspective adaptation and returns "this".|
}

s3d.Matrix(XX, XY, XZ, XI, YX, YY, YZ, YI, ZX, ZY, ZZ, ZI, IX, IY, IZ, II: Number): Object {
	@de|Diese Klasse definiert einen vierdimensionale Transformationsmatrix. Die Konstrukteurargumente initialisieren die entsprechenden Komponenten. Wenn nicht alle davon angegeben werden, wird die Matrix auf die Einheitsmatrix gesetzt.|
	@en|This class defines a four-dimensional transformation-matrix. The constructor-arguments initiate the corresponding components. If not all of them are specified, the matrix will be set to the unit-matrix.|
	+ x: s3d.Point
		@de|Dieses Feld speichert den "X"-Zeilenvektor.|
		@en|This field stores the "x"-row-vector.|
	+ y: s3d.Point
		@de|Dieses Feld speichert den "Y"-Zeilenvektor.|
		@en|This field stores the "y"-row-vector.|
	+ z: s3d.Point
		@de|Dieses Feld speichert den "Z"-Zeilenvektor.|
		@en|This field stores the "z"-row-vector.|
	+ i: s3d.Point
		@de|Dieses Feld speichert den "I"-Zeilenvektor.|
		@en|This field stores the "i"-row-vector.|
	+ set(XX, XY, XZ, XI, YX, YY, YZ, YI, ZX, ZY, ZZ, ZI, IX, IY, IZ, II: Number): s3d.Matrix
		@de|Diese Methode setzt die Komponenten und gibt "this" zurück.|
		@en|This method sets the components and returns "this".|
	+ setId(): s3d.Matrix
		@de|Diese Methode setzt die Matrix auf die Einheitsmatrix und gibt "this" zurück.|
		@en|This method sets the matrix to the unit-matrix and returns "this".|
	+ setChain(...: s3d.Matrix): s3d.Matrix
		@de|Diese Methode setzt die Matrix auf das Produkt der Matrizen "..." und gibt "this" zurück.|
		@en|This method sets the matrix to the product of the matrices "..." and returns "this".|
	+ setScale(X, Y, Z: Number): s3d.Matrix
		@de|Diese Methode setzt die Matrix auf die Skalierungsmatrix und gibt "this" zurück.|
		@en|This method sets the matrix to the scaling-matrix and returns "this".|
	+ setScaleX(X: Number): s3d.Matrix
		@de|Diese Methode setzt die Matrix auf die X-Skalierungsmatrix und gibt "this" zurück.|
		@en|This method sets the matrix to the x-scaling-matrix and returns "this".|
	+ setScaleY(Y: Number): s3d.Matrix
		@de|Diese Methode setzt die Matrix auf die Y-Skalierungsmatrix und gibt "this" zurück.|
		@en|This method sets the matrix to the y-scaling-matrix and returns "this".|
	+ setScaleZ(Z: Number): s3d.Matrix
		@de|Diese Methode setzt die Matrix auf die Z-Skalierungsmatrix und gibt "this" zurück.|
		@en|This method sets the matrix to the z-scaling-matrix and returns "this".|
	+ setOffsetX(X, Y, Z: Number): s3d.Matrix
		@de|Diese Methode setzt die Matrix auf die Verschiebungsmatrix und gibt "this" zurück.|
		@en|This method sets the matrix to the offset-matrix and returns "this".|
	+ setOffsetX(X: Number): s3d.Matrix
		@de|Diese Methode setzt die Matrix auf die X-Verschiebungsmatrix und gibt "this" zurück.|
		@en|This method sets the matrix to the x-offset-matrix and returns "this".|
	+ setOffsetY(Y: Number): s3d.Matrix
		@de|Diese Methode setzt die Matrix auf die Y-Verschiebungsmatrix und gibt "this" zurück.|
		@en|This method sets the matrix to the y-offset-matrix and returns "this".|
	+ setOffsetZ(Z: Number): s3d.Matrix
		@de|Diese Methode setzt die Matrix auf die Z-Verschiebungsmatrix und gibt "this" zurück.|
		@en|This method sets the matrix to the z-offset-matrix and returns "this".|
	+ setAspect(X, Y, Z: Number): s3d.Matrix
		@de|Diese Methode setzt die Matrix auf die Perspektivmatrix und gibt "this" zurück.|
		@en|This method sets the matrix to the perspective-matrix and returns "this".|
	+ setAspectX(X: Number): s3d.Matrix
		@de|Diese Methode setzt die Matrix auf die X-Perspektivmatrix und gibt "this" zurück.|
		@en|This method sets the matrix to the x-perspective-matrix and returns "this".|
	+ setAspectY(Y: Number): s3d.Matrix
		@de|Diese Methode setzt die Matrix auf die Y-Perspektivmatrix und gibt "this" zurück.|
		@en|This method sets the matrix to the y-perspective-matrix and returns "this".|
	+ setAspectZ(Z: Number): s3d.Matrix
		@de|Diese Methode setzt die Matrix auf die Z-Perspektivmatrix und gibt "this" zurück.|
		@en|This method sets the matrix to the z-perspective-matrix and returns "this".|
	+ setRotate(X, Y, Z, A: Number): s3d.Matrix
		@de|Diese Methode setzt die Matrix auf die Rotationsmatrix und gibt "this" zurück. Die Argumente "X", "Y" und "Z" definieren die Rotationsachse und das Argument "A" definiert den Winkel.|
		@en|This method sets the matrix to the rotation-matrix and returns "this". The arguments "X", "Y" and "Z" defines the axis of rotation and the argument "A" defines the angle.|
	+ setRotateX(X: Number): s3d.Matrix
		@de|Diese Methode setzt die Matrix auf die X-Rotationsmatrix und gibt "this" zurück.|
		@en|This method sets the matrix to the x-rotation-matrix and returns "this".|
	+ setRotateY(Y: Number): s3d.Matrix
		@de|Diese Methode setzt die Matrix auf die Y-Rotationsmatrix und gibt "this" zurück.|
		@en|This method sets the matrix to the y-rotation-matrix and returns "this".|
	+ setRotateZ(Z: Number): s3d.Matrix
		@de|Diese Methode setzt die Matrix auf die Z-Rotationsmatrix und gibt "this" zurück.|
		@en|This method sets the matrix to the z-rotation-matrix and returns "this".|
	+ setMatrix(Matrix: s3d.Matrix): s3d.Matrix
		@de|Diese Methode setzt die Komponenten auf die entsprechenden Werte von "Matrix" und gibt "this" zurück.|
		@en|This method setzt components to the corresponding values of "Matrix" and returns "this".|
	+ setCommand(...: ?<String; Number; s3d.Matrix>): s3d.Matrix
		@de|Diese Methode setzt die Matrix auf das Produkt der mit den Argumenten "..." definierten Matrizen und gibt "this" zurück. Die Argumentliste beschreibt eine Folge von Befehlen, von denen jeder aus einem Namen sowie bis zu 16 Argumenten besteht und eine Matrix definiert. Die verfügbaren Befehle sind:|
		@en|This method sets the matrix to  the product of the matrices described by the arguments "..." and returns "this". The argument list describes a sequence of commands each of which consists of a name and up to 16 arguments, and defines a matrix. The available commands are:|
		@|<table></tr><tr><th>"'T'"</th><td>|
		@de|Dieser Befehl erwartet keine Argumente und referenziert die Matrix "this".|
		@en|This command expects no arguments and references the Matrix "this".|
		@|</td></tr><tr><th>"'D'"</th><td>|
		@de|Dieser Befehl erwartet 16 Zahlen als Argumente und erzeugt eine Matrix über die Methode "set()".|
		@en|This command expects 16 numbers as arguments and produces a matrix via the method "set()".|
		@|</td></tr><tr><th>"'S'"</th><td>|
		@de|Dieser Befehl erwartet drei Zahlen als Argumente und erzeugt eine Matrix über die Methode "setScale()".|
		@en|This command expects three numbers as arguments and produces a matrix via the method "setScale()".|
		@|</td></tr><tr><th>"'O'"</th><td>|
		@de|Dieser Befehl erwartet drei Zahlen als Argumente und erzeugt eine Matrix über die Methode "setOffset()".|
		@en|This command expects three numbers as arguments and produces a matrix via the method "setOffset()".|
		@|</td></tr><tr><th>"'A'"</th><td>|
		@de|Dieser Befehl erwartet drei Zahlen als Argumente und erzeugt eine Matrix über die Methode "setAspect()".|
		@en|This command expects three numbers as arguments and produces a matrix via the method "setAspect()".|
		@|</td></tr><tr><th>"'R'"</th><td>|
		@de|Dieser Befehl erwartet vier Zahlen als Argumente und erzeugt eine Matrix über die Methode "setRotate()".|
		@en|This command expects four numbers as arguments and produces a matrix via the method "setRotate()".|
		@|</td></tr><tr><th>"'M'"</th><td>|
		@de|Dieser Befehl erwartet eine Matrix als Argumente und erzeugt eine Matrix über die Methode "setMatrix()".|
		@en|This command expects a matrix as arguments and produces a matrix via the method "setMatrix()".|
		@|</td></tr></table>|
	+ applyTo(Matrix: s3d.Matrix): s3d.Matrix
		@de|Diese Methode setzt die Matrix auf das Ergebnis der Multiplikation der Matrix mit "Matrix" ("this = this * Matrix") und gibt "this" zurück.|
		@en|This method sets the matrix to the result of the multiplication of the matrix with "Matrix" ("this = this * Matrix") and returns "this".|
	+ applyToPoint(Target, Source: s3d.Point): s3d.Matrix
		@de|Diese Methode setzt "Target" auf das Ergebnis der Multiplikation der Matrix mit "Source" ("Target = this * (Source||||Target)") und gibt "this" zurück. Wenn "Source" nicht definiert ist, wird "Target" verwendet.|
		@en|This method sets "Target" to the result of the multiplication of the matrix with "Source" ("Target = this * (Source||||Target)") and returns "this". If "Source" is not defined, "Target" is used.|
	+ applyToMatrix(Target, Source: s3d.Matrix): s3d.Matrix
		@de|Diese Methode setzt "Target" auf das Ergebnis der Multiplikation der Matrix mit "Source" ("Target = this * (Source||||Target)") und gibt "this" zurück. Wenn "Source" nicht definiert ist, wird "Target" verwendet.|
		@en|This method sets "Target" to the result of the multiplication of the matrix with "Source" ("Target = this * (Source||||Target)") and returns "this". If "Source" is not defined, "Target" is used.|
}

s3d.Group(Matrix: s3d.Matrix; Groups: s3d.Group[]; Objects: s3d.Object[]): s3d.Base {
	@de|Diese Klasse definiert eine Szenengruppe zur Erstellung von Szenenbäumen. Die Konstrukteurargumente initialisieren die entsprechenden Felder. Eine Szenengruppe kann von mehreren Szenengruppen und Zeichenflächen gleichzeitig verwendet werden.|
	@en|This class defines a scene-group for creating scene-trees. The constructor-arguments initiate the correspondung fields. A scene-group can be used by multiple scene-groups and surfaces at the same time.|
	+ skipMode: Number // s3d.SkipMode
	+ userData: Object // s3d.UserData
	+ setUserData(UserData: Object): s3d.UserData // s3d.UserData
	+ setSkipMode(SkipMode: Number): s3d.Base // s3d.Base
	+ matrix: s3d.Matrix
		@de|Dieses Feld speichert die Matrix, die zur Transformation der Punkte aller untergeordneten Szenenobjekte und Szenengruppen verwendet wird.|
		@en|This field stores the matrix, that is used to transform the points of all subordinated scene-objects and scene-groups.|
	+ groups: s3d.Group[]
		@de|Dieses Feld speichert die untergeordneten Szenengruppen.|
		@en|This field stores the subordinated scene-groups.|
	+ objects: s3d.Object[]
		@de|Dieses Feld speichert die untergeordneten Szenenobjekte.|
		@en|This field stores the subordinated scene-objects.|
	+ set(Matrix: s3d.Matrix; Groups: s3d.Group[]; Objects: s3d.Object[]; UserData: Object; SkipMode: Number): s3d.Group
		@de|Diese Methode setzt die Matrix, die untergeordneten Szenengruppen, die untergeordneten Szenenobjekte, die Nutzerdaten sowie den Auslassmodus und gibt "this" zurück.|
		@en|This method sets the matrix, the subordinated scene-groups, the subordinated scene-objects, the user-data as well as the skip-mode and returns "this".|
	+ setMatrix(Matrix: s3d.Matrix): s3d.Group
		@de|Diese Methode setzt die Matrix und gibt "this" zurück.|
		@en|This method sets the matrix and returns "this".|
	+ setGroups(Groups: s3d.Group[]): s3d.Group
		@de|Diese Methode setzt die untergeordneten Szenengruppen und gibt "this" zurück.|
		@en|This method setz the subordinated scene-groups and returns "this".|
	+ setObjects(Objects: s3d.Object[]): s3d.Group
		@de|Diese Methode setzt die untergeordneten Szenenobjekte und gibt "this" zurück.|
		@en|This method setz the subordinated scene-objects and returns "this".|
	+ setGroup(Group: s3d.Group): s3d.Group
		@de|Diese Methode setzt die Felder auf die entsprechenden Werte von "Group" und gibt "this" zurück.|
		@en|This method sets the fields to the corresponding values of "Group" and returns "this".|
}

s3d.Object(Model: s3d.Model; Points: s3d.Point[]; OnUpdate: s3d.OnUpdateMethod): s3d.Base {
	@de|Diese Klasse definiert ein Szenenobjekt. Die Konstrukteurargumente initialisieren die entsprechenden Felder. Eine Szenenobjekt kann von mehreren Szenengruppen gleichzeitig verwendet werden.|
	@en|This class defines a scene-object. The constructor-arguments initiate the correspondung fields. A scene-object can be used by multiple scene-groups at the same time.|
	+ skipMode: Number // s3d.SkipMode
	+ userData: Object // s3d.UserData
	+ setUserData(UserData: Object): s3d.UserData // s3d.UserData
	+ setSkipMode(SkipMode: Number): s3d.Base // s3d.Base
	+ model: s3d.Model
		@de|Dieses Feld speichert das Model des Elementknoten.|
		@en|This field stores the model of the element-node.|
	+ points: s3d.Point[]
		@de|Dieses Feld speichert die Punkte.|
		@en|This field stores the points.|
	+ onUpdate: s3d.OnUpdateMethod
		@de|Dieses Feld speichert den Ereignisempfänger, der beim Zeichnen ausgelöst wird und die Position des Szenenobjekt in der Zeichenreihenfolge zurück geben soll. Wenn die zurück gegebene Position zu "NaN" evaluiert, wird das Szenenobjekt nicht angezeigt.|
		@en|This field stores the event-listener, that is triggered while drawing and that should return the position of the scene-object in the draw-order. If the returned position evaluates to "NaN", the scene-object will not be shown.|
	+ set(Model: s3d.Model; Points: s3d.Point[]; OnUpdate: s3d.OnUpdateMethod; UserData: Object; SkipMode: Number): s3d.Object
		@de|Diese Methode setzt das Model des Elementknoten, die Punkte, den Ereignisempfänger, die Nutzerdaten sowie den Auslassmodus und gibt "this" zurück.|
		@en|This method sets the model of the element-node, the points, the event-listener , the user-data as well as the skip-mode and returns "this".|
	+ setModel(Model: s3d.Model): s3d.Object
		@de|Diese Methode setzt das Model des Elementknoten gibt "this" zurück.|
		@en|This method sets the model of the element-node and returns "this".|
	+ setPoints(Points: s3d.Point[]): s3d.Object
		@de|Diese Methode setzt die Punkte und gibt "this" zurück.|
		@en|This method sets the points and returns "this".|
	+ setOnUpdate(OnUpdate: s3d.OnUpdateMethod): s3d.Object
		@de|Diese Methode setzt den Ereignisempfänger und gibt "this" zurück.|
		@en|This method sets the event-listener and returns "this".|
	+ setObject(Object: s3d.Object): s3d.Object
		@de|Diese Methode setzt die Felder auf die entsprechenden Werte von "Object" und gibt "this" zurück.|
		@en|This method sets the fields to the corresponding values of "Object" and returns "this".|
}

s3d.Canvas(Width, Height, Index: Number; Surfaces: s3d.Surface[]): s3d.UserData {
	@de|Diese Klasse definiert eine Leinwand, die mehrere Zeichenflächen besitzen und eine davon anzeigen kann. Die Konstrukteurargumente initialisieren die entsprechenden Felder.|
	@en|This class defines a canvas that owns multiple surfaces and that can show one of them. The constructor-arguments initiate the correspondung fields.|
	+ userData: Object // s3d.UserData
	+ setUserData(UserData: Object): s3d.UserData // s3d.UserData
	+ node: s3d.Node
		@de|Dieses Feld speichert den Elementknoten.|
		@en|This field stores the element-node.|
	+ width: Number
		@de|Dieses Feld speichert die relative Breite der Leinwand.|
		@en|This field stores the relative width of the canvas.|
	+ height: Number
		@de|Dieses Feld speichert die relative Höhe der Leinwand.|
		@en|This field stores the relative height of the canvas.|
	+ index: Number
		@de|Dieses Feld speichert den Index der aktiven Zeichenfläche.|
		@en|This field stores the index of the active surface.|
	+ surfaces: s3d.Surface[]
		@de|Dieses Feld speichert die Zeichenflächen.|
		@en|This field stores the surfaces.|
	+ set(Width, Height, Index: Number; Surfaces: s3d.Surface[]; UserData: Object): s3d.Canvas
		@de|Diese Methode setzt die relative Breite, die relative Höhe, den Index der aktiven Zeichenfläche und die Zeichenflächen, aktualisiert die Leinwand und gibt "this" zurück.|
		@en|This method sets the relative width, the relative height, the index of the active surface and the surfaces, updates the canvas and returns "this".|
	+ setWidth(Width: Number): s3d.Canvas
		@de|Diese Methode setzt die relative Breite der Leinwand, aktualisiert die Leinwand und gibt "this" zurück.|
		@en|This method sets the relative width of the canvas, updates the canvas and returns "this".|
	+ setHeight(Height: Number): s3d.Canvas
		@de|Diese Methode setzt die relative Höhe der Leinwand, aktualisiert die Leinwand und gibt "this" zurück.|
		@en|This method sets the relative height of the canvas, updates the canvas and returns "this".|
	+ setIndex(Index: Number): s3d.Canvas
		@de|Diese Methode setzt den Index der aktiven Zeichenfläche, aktualisiert die Leinwand und gibt "this" zurück.|
		@en|This method sets the index of the active surface, updates the canvas and returns "this".|
	+ setSurfaces(Surfaces: s3d.Surface[]): s3d.Canvas
		@de|Diese Methode setzt die Zeichenflächen, aktualisiert die Leinwand und gibt "this" zurück.|
		@en|This method sets the surfaces, updates the canvas and returns "this".|
	+ setCanvas(Canvas: s3d.Canvas): s3d.Canvas
		@de|Diese Methode setzt die Felder auf die entsprechenden Werte von "Canvas", aktualisiert die Leinwand und gibt "this" zurück.|
		@en|This method sets the fields to the corresponding values of "Canvas", updates the canvas and returns "this".|
	+ clear(): s3d.Canvas
		@de|Diese Methode leert die Leinwand und gibt "this" zurück.|
		@en|This method clears the canvas and returns "this".|
	+ update(): s3d.Canvas
		@de|Diese Methode zeigt die aktive Zeichenfläche an und gibt "this" zurück.|
		@en|This method shows the active surface and returns "this".|
}

s3d.Surface(Id: String; Group: s3d.Group; Virtual, NoClip, NoJoin, NoSkip: Boolean): s3d.UserData {
	@de|Diese Klasse definiert eine Zeichenfläche, die eine Szenengruppe anzeigen kann. Die Konstrukteurargumente initialisieren die entsprechenden Felder. Eine Zeichenfläche kann nicht von mehreren Leinwänden gleichzeitig verwendet werden.|
	@en|This class defines a surface that can show a scene-group. The constructor-arguments initiate the correspondung fields. A surface can not be used by multiple canvases at the same time.|
	+ id: String
		@de|Dieses Feld speichert den Identifikator der Zeichenfläche. Im nicht-virtuellen Referenzmodus kann der Elementknoten über "'r_'+id" und im virtuellen Referenzmodus über "'v_'+id" identifiziert werden.|
		@en|This field stores the identifier of the surface. In the not-virtual reference-mode the element-node can be identified via "'r_'+id" and in the virtual reference-mode via "'v_'+id".|
	+ node: s3d.Node
		@de|Dieses Feld speichert den Elementknoten.|
		@en|This field stores the element-node.|
	+ group: s3d.Group
		@de|Dieses Feld speichert die Szenengruppe als Wurzel des Scenenbaumes.|
		@en|This field stores the scene-group as root of the scene-tree.|
	+ virtual: Boolean
		@de|Dieses Feld speichert den Referenzmodus. Wenn es "true" ist, wird der Elementknoten über "surfaceVirtualModel" erstellt, anderenfalls wird er über "surfaceRealModel" erstellt.|
		@en|This field stores the reference-mode. If it is "true", the element-node will be created via "surfaceVirtualModel", otherwise it is created via "surfaceRealModel".|
	+ noClip: Boolean
		@de|Dieses Feld speichert das Perspektivverbot. Wenn es "true" ist, sind perspektivische Transformationen deaktiviert. Transformationen sind im Modus "true" schneller.|
		@en|This field stores the perspective-prohibition. If it is "true", perspective transformations are deactivated. Transformations are faster in mode "true".|
	+ noJoin: Boolean
		@de|Dieses Feld speichert das Vereinigungsverbot. Wenn es "true" ist, werden alle Punkte transformiert und Punkte mit gleichen Komponenten nicht zusammengefasst, d.h sie werden nicht durch einen einzigen Punkt und eine einzige Transformation vertreten. Transformationen sind im Modus "false" schneller, Manipulationen an den Komponenten von Punkten können jedoch zu unerwartetem Verhalten führen.|
		@en|This field stores the join-prohibition. If it is "true", all points will be transformed and points with equal components will not be joined, i.e. they will not be represented by a single point in a single transformation. Transformations are faster in mode "false", but manipulations on components of points can cause unexpected behavior.|
	+ noSkip: Boolean
		@de|Dieses Feld speichert das Auslassverbot. Wenn es "true" ist, werden die Auslassmodi der Szenengruppen und Szenenobjekte ignoriert.|
		@en|This field stores the skip-prohibition. If it is "true", the skip-modes of scene-groups and scene-objects will be ignored.|
	+ cache: s3d.CacheSurface
		@de|Dieses Feld speichert den Cache der Zeichenfläche.|
		@en|This field stores the cache of the surface.|
	+ useRef: String
		@de|Dieses Feld speichert die Referenz auf die Zeichenfläche für das "xlink:href"-Attribut eines "SVGUseElement"-Elementknotens.|
		@en|This field stores the reference to the surface for the "xlink:href"-attribute of a "SVGUseElement"-element-node.|
	+ fillRef: String
		@de|Dieses Feld speichert die Referenz auf die Zeichenfläche für das "fill"-Attribut eines füllbaren Elementknotens.|
		@en|This field stores the reference to the surface for the "fill"-attribute of a fillable element-node.|
	+ set(Id: String; Group: s3d.Group; Virtual, NoClip, NoJoin, NoSkip: Boolean; UserData: Object): s3d.Surface
		@de|Diese Methode setzt den Identifikator der Zeichenfläche, die Szenengruppe, den Referenzmodus, das Perspektiv-, das Vereinigungs- sowie das Auslassverbot, aktualisiert die Referenzen auf die Zeichenfläche, den Elementknoten, den Cache und die Zeichenfläche und gibt "this" zurück.|
		@en|This method sets the identifier of the surface, the scene-group, the refernence-mode, the perspective-, the join- and the skip-prohibition, updates the element-node, the references to the surface, the cahe and the surface and returns "this".|
	+ setId(Id: String): s3d.Surface
		@de|Diese Methode setzt den Identifikator der Zeichenfläche, aktualisiert die Referenzen auf die Zeichenfläche und gibt "this" zurück.|
		@en|This method sets the identifier of the surface, updates the references to the surface and returns "this".|
	+ setGroup(Group: s3d.Group): s3d.Surface
		@de|Diese Methode setzt die Szenengruppe, aktualisiert den Cache sowie die Zeichenfläche und gibt "this" zurück.|
		@en|This method sets the scene-group, updates the cahe as well as the surface and returns "this".|
	+ setVirtual(Virtual: Boolean): s3d.Surface
		@de|Diese Methode setzt den Referenzmodus, aktualisiert den Elementknoten sowie die Zeichenfläche und gibt "this" zurück.|
		@en|This method sets the reference-mode, updates the element-node as well as the surface and returns "this".|
	+ setNoClip(NoClip: Boolean): s3d.Surface
		@de|Diese Methode setzt das Perspektivverbot, aktualisiert die Zeichenfläche und gibt "this" zurück.|
		@en|This method sets the perspective-prohibition, updates the surface and returns "this".|
	+ setNoJoin(NoJoin: Boolean): s3d.Surface
		@de|Diese Methode setzt das Vereinigungsverbot, aktualisiert den Cache sowie die Zeichenfläche und gibt "this" zurück.|
		@en|This method sets the join-prohibition, updates the cache as well as the surface and returns "this".|
	+ setNoSkip(NoSkip: Boolean): s3d.Surface
		@de|Diese Methode setzt das Auslassverbot, aktualisiert die Zeichenfläche und gibt "this" zurück.|
		@en|This method sets the skip-prohibition, updates the surface and returns "this".|
	+ setSurface(Surface: s3d.Surface): s3d.Surface
		@de|Diese Methode setzt die Felder auf die entsprechenden Werte von "Surface", aktualisiert die Referenzen auf die Zeichenfläche, den Elementknoten, den Cache und die Zeichenfläche und gibt "this" zurück.|
		@en|This method sets the fields to the corresponding values of "Surface", updates references to the surface, the element-node, the cache and the surface and returns "this".|
	+ clear(Cache: Boolean): s3d.Surface
		@de|Diese Methode leert die Zeichenfläche und gibt "this" zurück. Wenn "Cache" "true" ist, wird auch der Cache geleert.|
		@en|This method clears the surface and returns "this". If "Cache" is "true" also the cache will be cleared.|
	+ update(Cache: Boolean): s3d.Surface
		@de|Diese Methode aktualisiert die Zeichenfläche und gibt "this" zurück. Wenn "Cache" "true" ist, wird auch der Cache aktualisiert. Sie sollte mit "false" aufgerufen werden, nachdem die Komponenten einer Matrix im Szenenbaum oder die Komponenten eines Punktes eines Szenenobjektes verändert wurden. Sie sollte mit "true" aufgerufen werden, nachdem die Struktur des Szenenbaumes, das Model eines Elementknoten oder die Punkte eines Szenenobjektes verändert wurden.|
		@en|This method updates the surface and returns "this". If "Cache" is "true" also the cache will be updated. It should be called with "false", after the components of a matrix in the scene-tree or the components of a point of a scene-object were changed. It should be called with "true", after the structure of the scene-tree, the node-model or the points of a scene-object were changed.|
}

s3d.CacheObject(Index: Number; Object: s3d.Object; Points: s3d.Point[]): s3d.SkipMode {
	@de|Diese Klasse definiert eine optimierte Zugriffsstruktur auf ein zu verarbeitendes Szenenobjek im Cache einer Zeichenfläche. Die Konstrukteurargumente initialisieren die entsprechenden Felder. Der Elementknoten wird mit über "s3d.Model.toNode()" aus dem Model des Szenenobjektes berechnet.|
	@en|This class defines an optimised access-structure on a scene-object to be processed in the cache of a surface. The constructor-arguments initiate the correspondung fields. The element-node is created via "s3dModel.toNode()" out of the model of the scene-object.|
	+ skipMode: Number // s3d.SkipMode
	+ node: s3d.Node
		@de|Dieses Feld speichert den, durch das Model des Szenenobjektes beschriebenen Elementknoten.|
		@en|This field stores the element-node, described by the model of the scene-object.|
	+ index: Number
		@de|Dieses Feld speichert den Objektindex.|
		@en|This field stores the object-index.|
	+ order: Number
		@de|Dieses Feld speichert den Ebenenindex, der zusammen mit dem Objektindex die Zeichenreihenfolge bestimmt.|
		@en|This field stores the layer-index that together with the object-index determines the draw-order .|
	+ object: s3d.Object
		@de|Dieses Feld speichert das Szenenobjekt.|
		@en|This field stores the scene-object.|
	+ points: s3d.Point[]
		@de|Dieses Feld speichert die transformierten Punkten des Szenenobjektes.|
		@en|This field stores the transformed points of the scene-object.|
}

s3d.CacheSurface(Skips: s3d.CacheOperation<s3d.SkipMode; s3d.SkipMode>[]; Points: s3d.CacheOperation<s3d.Matrix; s3d.Point>[]; Objects: s3d.CacheObject[]; Matrices: s3d.CacheOperation<s3d.Matrix; s3d.Matrix>[]): Object {
	@de|Diese Klasse definiert einen optimierte Zugriffsstruktur auf die während der Aktualisierung einer Zeichenfläche zu verarbeitenden Objekte und Operationen. Die Konstrukteurargumente initialisieren die entsprechenden Felder.|
	@en|This class defines an optimised access-structure on the objects and operations to be processed while updating a surface. The constructor-arguments initiate the correspondung fields.|
	+ skips: s3d.CacheOperation<s3d.SkipMode; s3d.SkipMode>[]
		@de|Dieses Feld speichert die Operation zur Erzeugung der resultierenden Auslassmodi.|
		@en|This field stores the operations for generating the resulting skip-modes.|
	+ points: s3d.CacheOperation<s3d.Matrix; s3d.Point>[]
		@de|Dieses Feld speichert die Operation zur Transformation von Punkten.|
		@en|This field stores the operations for transforming points.|
	+ objects: s3d.CacheObject[]
		@de|Dieses Feld speichert den Cacheszenenobjekte.|
		@en|This field stores the cache-scene-objects.|
	+ matrices: s3d.CacheOperation<s3d.Matrix; s3d.Matrix>[]
		@de|Dieses Feld speichert die Operation zur Transformation von Matrizen.|
		@en|This field stores the operations for transforming matrices.|
}

s3d.CacheOperation<GParent; GValue>(Parent: GParent; Source, Target: GValue): s3d.SkipMode {
	@de|Diese Klasse definiert eine Operation. Die Konstrukteurargumente initialisieren die entsprechenden Felder.|
	@en|This class defines an operation. The constructor-arguments initiate the correspondung fields.|
	+ skipMode: Number // s3d.SkipMode
	+ parent: GParent
		@de|Dieses Feld speichert den Elternwert.|
		@en|This field stores the parent-value.|
	+ source: GValue
		@de|Dieses Feld speichert den Quellwert.|
		@en|This field stores the source-value.|
	+ target: GValue
		@de|Dieses Feld speichert den Zielwert.|
		@en|This field stores the target-value.|
	+ skipCount: Number
		@de|Dieses Feld speichert die Anzahl der nachfolgenden auszulassenden Operationen.|
		@en|This field stores the number of subsequent operations to be skipped.|
}

s3d.UserData(): Object {
	@de|Diese Schnittstelle definiert die Nutzerdateneigenschaft.|
	@en|This interface defines the user-data-property.|
	+ userData: Object
		@de|Dieses Feld speichert die Nutzerdaten.|
		@en|This field stores the user-data.|
	+ setUserData(UserData: Object): s3d.UserData
		@de|Diese Methode setzt die Nutzerdaten und gibt "this" zurück.|
		@en|This method sets the user-data and returns "this".|
}

s3d.SkipMode(): Object {
	@de|Diese Schnittstelle definiert die Auslassmoduseigenschaft. Der Wert dieser Eigenschaft kann eine beliebige Kombination der Markierungen "s3d.SKIP_CALC" und "s3d.SKIP_DRAW" sein.|
	@en|This interface defines the skip-mode-property. The value of this property can be an arbitrary combination of the flags "s3d.SKIP_CALC" and "s3d.SKIP_DRAW".|
	+ skipMode: Number
		@de|Dieses Feld speichert den Auslassmodus.|
		@en|This field stores the skip-mode.|
}

s3d.OnUpdateMethod(): Function {
	@de|Diese Klasse definiert den Ereignisempfänger eines Szenenobjektes.|
	@en|This class defines the event-listener of a scene-object.|
	+ (Node: s3d.Node; Points: s3d.Point[]): Number
		@de|Der Aufrufoperator wird mit dem Szenenobjekt als Kontext "this", dem durch das Model des Szenenobjektes erstellten Knoten "Node" und den transformierten Punkten "Points" des Szenenobjektes aufgerufen und soll die Position des Szenenobjektes in der Zeichenreihenfolge zurück geben. Wenn die zurück gegebene Position zu "NaN" evaluiert, wird das Szenenobjekt nicht angezeigt.|
		@en|The call-operator will be called with the scene-object as context "this", the node "Node" created out of the model of the scene-object and the transformed points "Points" of the scene-object and should return the position of the scene-object in the draw-order. If the returned position evaluates to "NaN", the scene-object will not be shown.|
}
